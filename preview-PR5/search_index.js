var documenterSearchIndex = {"docs":
[{"location":"Lesson1/0_windows/#Step-0:-Windows-users-need-Windows-Subsystem-for-Linux-(WSL)-1","page":"Windows Users","title":"Step 0: Windows users need Windows Subsystem for Linux (WSL)","text":"","category":"section"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"If you are working on a Mac, you can skip this section and go straight to Getting started with the terminal. <!– TODO: Add link –>","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"The inner guts of the Windows operating system are different than those of Mac and Linux. The bad news is, many computational biology tools expect the later, a so-called \"Unix\" environment. The good news is that Windows 10 has a way to run a Unix environment side-by-side with Windows.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"note: Windows Users\nThroughout this course, you will see boxes like this labeled \"Windows Users.\" These contain information about ways in which Windows is different from Unix operating systems. Pay careful attention to these boxes, since other instructions may be unclear if you don't modify them accordingly.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"Much of this guide was cribbed from Michael Treat's guide, which has a lot more information and a video that you may find useful.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"Before you begin check to make sure that you have the most recent version of Windows 10.","category":"page"},{"location":"Lesson1/0_windows/#Step-0.1-Enable-the-WSL-Feature-through-Windows.-1","page":"Windows Users","title":"Step 0.1 - Enable the WSL Feature through Windows.","text":"","category":"section"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"Right click on the start menu and click on Settings.\nIn the Search box, type Turn Windows Features On Or Off and click on the item that populates in the list.\nA window will pop up with a list of folders with checkboxes next to them. Scroll down and check the box for Windows Subsystem for Linux.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"This will install the needed files. Follow any directions that pop up and restart when asked.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"This guide might not open after restart, so be sure to make note of the url or star this repo.","category":"page"},{"location":"Lesson1/0_windows/#Step-0.2-Install-the-Ubuntu-app-from-the-Windows-Store.-1","page":"Windows Users","title":"Step 0.2 - Install the Ubuntu app from the Windows Store.","text":"","category":"section"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"Click here to go to Microsoft store and install the Ubuntu App\nFollow the on-screen prompts to install the app.\nWhen the app is ready, the button that said 'Install' will change to say 'Launch'. Click Launch. This will start the Ubuntu installation. This installation only happens the first time the app is launched. It's the actual Ubuntu (or Linux) OS installing and mounting to your Windows FS.","category":"page"},{"location":"Lesson1/0_windows/#Step-0.3-Finish-Installing-the-Ubuntu-App.-1","page":"Windows Users","title":"Step 0.3 - Finish Installing the Ubuntu App.","text":"","category":"section"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"It will ask you to enter a username. This will be the root / admin user for the Ubuntu FS. Do not include spaces in your username.\nIt will then ask you to enter and confirm a password. Also note that it will protect your password by not displaying it to the screen when you type, but it is registering your key strokes.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"note: Note\nSecurity is important at all levels,  so even though you have to use this password often,  don't be tempted to make it too simple.  Essentially all of your Window's files can be viewed and modified by this user,  so keep that password safe and strong.Also be careful not to mess with any permissions!  If you think you need to do that to complete this setup,  then stop and reach out to me.  You should NOT have to worry about any permissions with this,  and if you do get stuck there then I need to know so I can help troubleshoot you through this,  or so we know we need to update this guide*.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"Finally, the prompt will change and you will be on a command line. Type pwd and press enter to see where you currently are in the FS. you should be at /home/<your username>. This is the root level of your Ubuntu user (more on that later).","category":"page"},{"location":"Lesson1/0_windows/#Step-0.4-Updating-Default-Software.-1","page":"Windows Users","title":"Step 0.4 - Updating Default Software.","text":"","category":"section"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"You will need to run a quick couple commands in order to run updates software updater. The Ubuntu OS is shipped with a ton of built-in software, but those libraries may have had more recent updates come out since the OS was shipped. Updating this now is quick and will help you stay current and protected.","category":"page"},{"location":"Lesson1/0_windows/#","page":"Windows Users","title":"Windows Users","text":"In the terminal, type sudo apt-get update and press enter. (you may need to enter your password)\nWhat does sudo apt-get update do?\nOnce that is complete, execute sudo apt-get upgrade. Press y when prompted.\nWhat does sudo apt-get upgrade do?\nOnce that is done, type sudo apt autoremove. This will remove any packages that are no longer needed.\nWhat does sudo apt-get autoremove do?","category":"page"},{"location":"Lesson1/2_git/#Part-2-git-for-version-control-1","page":"Git for Version Control","title":"Part 2 - git for version control","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"If you've ever worked on an assignment and ended up with a list of files like","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"assignment1.docx\nassignment1_v2.docx\nassignment1_v2_kevins_comments.docx\nassignment1_v3_fix_final.docx\nassignment1_v3_fix_final_for_real_this_time.docx","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"... you'll understand the importance of version control.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"It goes well beyond naming of course. How can you tell what changed between version 1 and version2? Does version 3 take the comments Kevin made on v2 into account? Is ...fix_final_for_real_this_time really the last version?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"It's even worse if multiple people are working on the same document. If you and your lab partner are editing a document at the same time, How can you gracefully merge the changes? What if the changes you make and the changes she makes are incompatible?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Software like Google Docs can address some of these issues, but incompatible changes can still occur. Imagine you're writing an essay about a dog. At the beginning of the essay, you've written","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The quick brown fox jumped over the lazy dog","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"You and your partner are both refining this epic story at the same time, and further on you write,","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Because of how lazy the dog was, she didn't chase the fox.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"But your partner decided the first line needed some more detail and changes it to","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The quick brown female fox jumped over the lazy male dog.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"so your pronouns are out of step.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"In writing, a mistake like this might just look silly, but in programming, it can mean your code doesn't run or generates the wrong answer. Even more critically, code often involves many files working together, and keeping track of the versions of multiple files at the same time is necessary.","category":"page"},{"location":"Lesson1/2_git/#git-is-a-program-for-\"distributed-version-control\"-1","page":"Git for Version Control","title":"git is a program for \"distributed version control\"","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"git is a distributed version control system (DVCS). That is, it helps one keep track of one's code, and the information about versions is distributed among many systems.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Early version control systems were centralized - there was a single server that kept track of all of the information about a code repository. Users could \"checkout\" individual files to edit them, and the central repository would lock that file to prevent conflicting changes. This makes it easy to prevent conflicts, but is also a bit impractical.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"By contrast, git is distributed - each user's system contains the entire revision history, and conflicts between versions are explicitly managed when two different edits to the code are brought together. Don't worry if this isn't super clear at this stage - we'll get into some practical examples in a sec.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"You can think of a git \"repository\" (usually shortened to \"repo\") as a directory with super powers. If you're looking at the directory using Finder or Explorer, it might not look any different, but it's much more powerful. Before we get into that, though, we need to get git installed.","category":"page"},{"location":"Lesson1/2_git/#Installing-git-1","page":"Git for Version Control","title":"Installing git","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"If you are using Windows Subsystem for linux, or a linux operation system, git should already be installed.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 1: check if git is installed by executing git --help in the terminal.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git --help","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone      Clone a repository into a new directory\n   init       Create an empty Git repository or reinitialize an existing one\n# ... output truncated","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"If you're using a Mac, git might not be installed. Executing the command above will probably result in an error message:","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"bash: git: command not found...","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"So you need to install it (if the git help message appeared, you can skip to here).","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The easiest way to install git on a mac is using homebrew.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 1b: If you're using a mac and don't have git instealled, copy and paste the following command into your terminal (excluding the $), then press enter to execute.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"==> This script will install:\n/usr/local/bin/brew\n/usr/local/share/doc/homebrew\n/usr/local/share/man/man1/brew.1\n/usr/local/share/zsh/site-functions/_brew\n/usr/local/etc/bash_completion.d/brew\n/usr/local/Homebrew\n==> The following new directories will be created:\n/usr/local/sbin\n# ...","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"And follow the prompts. If you are asked for your password, use the one you use to log into your computer. Note that you will not see anything appear as you type, just type the password and hit enter.","category":"page"},{"location":"Lesson1/2_git/#configuring_git-1","page":"Git for Version Control","title":"Configuring git","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The next step is to tell git your name and email address, so that you are credited with the changes you make to repositories.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 2: Enter the following commands, changing the name and e-mail address to yours.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git config --global user.name \"Kevin Bonham, PhD\"\n$ git config --global user.email kbonham@wellesley.edu","category":"page"},{"location":"Lesson1/2_git/#Practice:-Create-your-first-git-repository-1","page":"Git for Version Control","title":"Practice: Create your first git repository","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 3: In your terminal, change your working directory to your Documents folder (~/Documents)","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"note: Windows Users\nYou can perform the following steps either in the Documents/ folder of your linux filesystem found at ~/Documents, or of your Windows filesystem, which is found at /mnt/c/Users/<your_username>/Documents","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 4: Next, create a new directory called my_repo.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"tip: Reminders\ncd is the command for changing working directory\nmkdir is the command for making a directoryLook back at the previous section for more information, and don't worry if you need to keep looking up stuff like this. The stuff you do regularly will become second nature, and the other stuff is always a Google search away.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 5: Now, change your working directory into the newly created my_repo/ and initialize a git repository using the command git init","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"my_repo $ git init","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Initialized empty Git repository in /home/kevin/Documents/my_repo/.git/","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"warning: Checking Questions\nIs the path shown in the output a relative or absolute path?If you use the command ls to list the contents of the current directory, can you see the .git/ directory that was created? Why or why not?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 6: Open the folder in your operating system's file system navigator (Finder on a Mac, Explorer in Windows).","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"note: Windows Users\nIf you created the repository in the linux filesystem, the easiest way to do this is to execute explorer.exe ./ from the command line. See here for more information about how the Windows and Linux filesystems interact.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"This folder appears empty right now, but in fact, there's a hidden .git folder that will include all of the version information for all of the files that you track.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Let's see how this works.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 7: open the Atom text editor and create a new file, then save it in your repository directory as fox.txt.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 8: In your terminal, list the contents of the directory to be sure the file was created.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"my_repo $ ls","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"fox.txt","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"When you create new files, git does not track them automatically. Let's see what git sees at the moment:","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git status","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tfox.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"So git sees the file exists, but it tells you it's not being tracked.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 9: Let's fix that (the status message helpfully tells you how):","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"my_repo $ git add fox.txt\nmy_repo $ git status","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"On branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n\tnew file:   fox.txt","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The file is now \"[staged]\" - that is ready to be \"committed.\" In git, a \"[commit]\" is used to register a specific version of a repository. The current state of all of the tracked files in the repository will be recorded.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"We don't really need to track an empty file, let's add some text to it.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 10: In Atom, add the following line to fox.txt and save.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The quick fox jumped.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Now, back in the terminal, what's the status?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git status","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"On branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n\tnew file:   fox.txt\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   fox.txt","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Notice that fox.txt now appears under both \"Changes to be committed\" and \"Changes not staged for commit\".","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Why? Because you initially staged an empty file, and now there's a modified version of the file that has not been staged. You can see the difference between the current state of the file and what's staged using git diff","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git diff fox.txt | cat","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"diff --git a/fox.txt b/fox.txt\nindex e69de29..395235f 100644\n--- a/fox.txt\n+++ b/fox.txt\n@@ -0,0 +1 @@\n+The quick fox jumped.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The syntax of this output is perhaps a bit confusing, but it's saying that a line was added to fox.txt.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 11: Let's go ahead and stage this change, and then make our first commit.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git add fox.txt\n$ git commit -m \"my first commit\"","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"[master (root-commit) b183d56] my first commit\n 1 file changed, 1 insertion(+)\n create mode 100644 fox.txt","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git status","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"On branch master\nnothing to commit, working tree clean","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Congratulations! You have a git repository.","category":"page"},{"location":"Lesson1/2_git/#Practice:-Just-keep-committing-1","page":"Git for Version Control","title":"Practice: Just keep committing","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Try making some more changes to this file, make some new files, and use git add, git commit, and git status to keep track of those changes.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"warning: Warning\nIf you enter git commit without including a commit message with the -m flag, your terminal may transform into a text editor. If this happens, you may find it difficult to return to the command prompt. Try typing (don't copy/paste) :q! then enter.If this doesn't work, ask for assistance. If Kevin or the TAs are unavailable, you can always close and re-open your terminal.In either case, your commit will be aborted.","category":"page"},{"location":"Lesson1/2_git/#Using-git-in-this-course-1","page":"Git for Version Control","title":"Using git in this course","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"It might not be clear to you yet why using a version control system is worthwhile. If you don't trust me, the fact that almost every software company uses git (or something similar) should give you some confidence that it's important.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"In any case, this entire course will use git and github.com (a website for managing and collaborating on git repositories). So let's work on doing that.","category":"page"},{"location":"Lesson1/2_git/#Cloning-a-repository-1","page":"Git for Version Control","title":"Cloning a repository","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 0a: If you haven't already, sign up for a github account at https://github.com/join","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"warning: Privacy Note\nYou do not need to use your wellesley.edu email address to create this account, but let Kevin know if you use a different address so that you get credit for your work.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 0b: If you'd like, you may sign up for a github student discount pack. This is not necessary for this course.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 1: Accept Assignment1 at this link","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"When you accept the assignment, a git repository is created in your github account.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 2: Click the link shown on the webpage","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"(Image: accept assignment)","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"This repository contains a lot more stuff than the repository you made above, but it's simply a directory with subdirectories and files (plus git superpowers of course). You can click on the directories and files to see their contents.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Of course, this repository is stored on github, not your computer. We can fix that by [clone]ing this repository to your computer.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 3a: Find the repository url on the github page:","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"(Image: clone repo)","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 3b: Copy the url listed, and then in your terminal,","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git clone <paste-url>","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"remote: Enumerating objects: 18, done.\nremote: Counting objects: 100% (18/18), done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 18 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (18/18), done.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"You should now have a new directory called lesson1-<your_username>/.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 4: Change your working directory, and do git status","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"lesson1 $ git status","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"On branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"You now have a local copy of the [remote] repository. By default, the name of this remote is origin.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"In principal, it is possible to have many remotes and many local copies, but in practice, you'll usually only have one of each. See the url of origin:","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"lesson1 $ git remote get-url origin","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"https://github.com/wellesley-bisc195/lesson1-<your_username>","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"There are many other useful options for git remote. Take a look by executing git remote --help.","category":"page"},{"location":"Lesson1/2_git/#Example-use-case-1","page":"Git for Version Control","title":"Example use case","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The Lesson1 repository has a directory called example that contains some files ending in .py. These files contain some python code.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Let's take a look at these files using the terminal:","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"lesson1 $ ls example","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"run.py            some_functions.py some_variables.py","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"lesson1 $ head example/some_functions.py","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"def say_name(name):\n    print(\"Hi there {}!\".format(name))\n\ndef say_age(age):\n    print(\"You are {} years old\".format(age))","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 1: You can run this code in your terminal:","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"lesson1 $ python example/run.py","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Hi there Kevin!\nYou are 35 years old","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"I'm guessing the output of this program is incorrect - at least for you.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 2: Open up example/some_variables.py and change the values to be more appropriate. Be sure to save the file, then execute python example/run.py again.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 3: Once you have it working, go ahead and commit the changes. Be sure to use an informative commit message.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Check out your commit history to see the changes you've made:","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"lesson1 $ git log --pretty=oneline | head","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"573c6bc36101053ba4189b95842462906b1fa898 Merge pull request #1 from wellesley-bisc195/assignment\nef95f6c6a59cbb59394cb9de468656c35f619b26 add Project.toml to test\n1efa59fcbda7751fd39e3cda85c469aaaafc6ed0 fix tests\n40236a8271349c3ac7ca5d922809eb1d9197932b use comp bio course repo\ne9db777df8e4ecf7dd54cb67ca2e2c971d3df5cb end function\nbca2885725384e2827d18d4b57244f04c8290f71 remove docs, work on assignment","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"You'll see something different, of course, but at the top you should see you recent commits, including the commit messages you wrote.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"So far, this might seem like something that could have been handled with google docs. You only had to change a single file. Let's try something a little more complicated.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"If you open the files in atom, you might notice that there are a bunch of connections between the files. For example, in some_functions.py, I've defined the say_name() and say_age() functions, then in run.py, one of the first lines is from some_functions import say_name, say_age, and in the main() function, you can see say_name(n) and say_age(a).","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"This is not an accident.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 4: Change the line def say_name(name): in some_functions.py to def say_the_name(name):, save the file, then try to run python example/run.py again. What happens?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"You should get an ImportError, since run.py is trying to import something called say_name, but this doesn't exist anymore.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Step 5: Now fix the line starting with from some_functions, to import say_the_name instead of say_name. Can you run the code now?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Nope, you should now be getting a NameError, since you didn't change the call to say_name inside the main() function.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"tip: Tip\nSeeing error messages when you try to run code is a very normal part of programming, and not just when you're learning. A lot of the error message might seem like gobbledygook, but it's worth paying attention. Learning to find the useful information in an error message is incredibly useful when trying to debug your code.Like most of coding, this takes lots of practice, but here are some places to start:Can you find the name of the error?\nAre their parts of the message in plain english (those parts are usually quite helpful)?\ncan you find line numbers/file names pointing to where the problem might be?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"OK, changing to say_the_name is maybe not worth it. But you've now changed a bunch of things - how do you get back to a working version?","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"In this silly little case, perhaps it's not so hard, but in real-life coding, one often needs to make many changes to many different files. Git makes this easy.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Assuming you haven't made any new commits since you had a working program, just do","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"lesson1 $ git reset --hard HEAD","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"HEAD is short-hand for the last commit on this branch. The --hard flag undoes any changes. We'll talk about more complicated uses of git reset later.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"note: Note\nIf you did make commits in the mean time, no problem. Use the git log command from above to see your recent commits, then copy the commit hash (the weird sequence of characters on the left) and use that instead of HEAD in the git reset command.","category":"page"},{"location":"Lesson1/2_git/#Practice-1","page":"Git for Version Control","title":"Practice","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The variables a and n in some_variables.py aren't very informative. It's usually a good idea to have variable and function names be \"self documenting\", that is have the name tell you something about what they're for. Change these variables to my_age and my_name respectively, then fix run.py so that it uses these new variables.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Be sure to save the files and commit your changes when everything is working again (you can also commit intermediate steps).","category":"page"},{"location":"Lesson1/2_git/#Assignment1-1","page":"Git for Version Control","title":"Assignment1","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"The src directory in the Lesson1 repo contains a code file called assignment.jl.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Follow the instructions in the comments (remember, comment lines in julia files start with #), then use git add and git commit to commit these changes to the repository. You do not have to wait until you're finished to commit changes - There are many different philosophies about what amount of work should be included in a commit, but my philosophy is \"commit early, commit often.\"","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"tip: Tip\nFor files that are already being tracked, you can skip the two-step add and commit. Instead, you can do git commit -a -m \"commit message\" - the -a (or --all) flag automatically adds all previously tracked files.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Once you've made and committed the requested changes, it's time to [push] those commits back to the remote. When you cloned this repo, git automatically set the remote tracking branch, so you can just do","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"$ git push","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Enumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 409 bytes | 409.00 KiB/s, done.\nTotal 4 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo https://github.com/wellesley-bisc195/lesson-2-bisc195tester\n   be920ca..0da312f  master -> master","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"Good work!","category":"page"},{"location":"Lesson1/2_git/#Key-Terms-1","page":"Git for Version Control","title":"Key Terms","text":"","category":"section"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"[staged]: Files with changes that are ready to be committed.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"[commit]: A unique reference to a specific state of a repository.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"[remote]: A clone of a repository that exists on a server, rather than your local machine. You can see what remotes are linked to your local repo with git remote.","category":"page"},{"location":"Lesson1/2_git/#","page":"Git for Version Control","title":"Git for Version Control","text":"[push]: Move commits from a local repo to the remote.","category":"page"},{"location":"Lesson1/#Getting-started-1","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"Lesson1/#","page":"Getting started","title":"Getting started","text":"This file contains instructions for completing today's lesson. It is written in a language called \"markdown\", which allows plain text to be easily converted into nicely formatted webpages like the one you're looking at now. But we'll come back to this.","category":"page"},{"location":"Lesson1/#","page":"Getting started","title":"Getting started","text":"To complete this lesson, follow the instructions below.","category":"page"},{"location":"Lesson1/#","page":"Getting started","title":"Getting started","text":"warning: Warning\nIt is even more important than usual to read and follow instructions when it comes to computers and programming. We will be interacting with our computers using procedural language - that is, language that follows a strict set of procedures. Skipping steps or doing things out of order can lead to unexpected results.","category":"page"},{"location":"Lesson1/#","page":"Getting started","title":"Getting started","text":"Pages = [\"Lesson1/index.md\", \"Lesson1/0_windows.md\",\"Lesson1/1_terminal.md\"]\nDepth = 3","category":"page"},{"location":"Syllabus/#Syllabus-1","page":"Syllabus","title":"Syllabus","text":"","category":"section"},{"location":"Syllabus/#Course-Info-1","page":"Syllabus","title":"Course Info","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Course Code: BISC 195   Course Title: Essential Skills for Computational Biology","category":"page"},{"location":"Syllabus/#Instructor-1","page":"Syllabus","title":"Instructor","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Instructor: Kevin Bonham, PhD email: kbonham@wellesley.edu Github: kescobo Office Hours: TBD","category":"page"},{"location":"Syllabus/#Course-Run-Info-1","page":"Syllabus","title":"Course Run Info","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"TBD <!– TODO: add class schedule etc –>","category":"page"},{"location":"Syllabus/#Description-1","page":"Syllabus","title":"Description","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Modern biology depends on computing. At the same time, many biologists are intimidated by the prospect of programming. In an era of high-throughput assays and datasets with thousands of samples containing millions of molecular sequences, a basic knowledge of computational methods is critical. Many tools for analyzing vast quantities of molecular data have only command-line interfaces, and performing statistical tests or plotting these large datasets is impossible with excel or other software with a graphical user interface. This course will provide an introduction to essential computational techniques for biological data analysis using a modern programming language, focusing on strategies for solving problems rather than specific syntax.","category":"page"},{"location":"Syllabus/#Learning-Objectives-1","page":"Syllabus","title":"Learning Objectives","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"After completing this course, students will be able to:","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Navigate their computer and manipulate files using a command line interface.\nWrite a script to perform statistical analyses on and plot a large numerical dataset.\nFind, download, and process large biological sequence datasets from an online source.s\nSearch for a solution to a novel error or software bug and implement it in code.\nUse a version control system to keep track of changes to their code.","category":"page"},{"location":"Syllabus/#Prerequisites-1","page":"Syllabus","title":"Prerequisites","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"This course is an introduction to programming, but examples will be rooted in molecular and evolutionary biology problems. Students without prior coursework in biology should be able to succeed with additional effort.","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Recommended: Molecular and/or Cell Biology.","category":"page"},{"location":"Syllabus/#Course-Materials-1","page":"Syllabus","title":"Course Materials","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Online textbook (free)","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Think Julia: How to think like a computer scientist","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Lessons and code repositories <!– TODO: Add link –>","category":"page"},{"location":"Syllabus/#Course-Schedule-1","page":"Syllabus","title":"Course Schedule","text":"","category":"section"},{"location":"Syllabus/#Week-1-1","page":"Syllabus","title":"Week 1","text":"","category":"section"},{"location":"Syllabus/#Lesson-1:-Getting-Started-1","page":"Syllabus","title":"Lesson 1: Getting Started","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Lesson repository","category":"page"},{"location":"Syllabus/#Learning-Objectives-2","page":"Syllabus","title":"Learning Objectives","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Compare and contrast computer code meaning and syntax\nIdentify common \"algorithms\" used in their daily lives","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Navigate their computer's file system using a command line interface\nUse a plain text editor (Atom) to modify source code\nInstall command line software using homebrew\nClone, commit to, and push from a git repository","category":"page"},{"location":"Syllabus/#Lesson-2:-Types-of-data,-operations-on-data-1","page":"Syllabus","title":"Lesson 2: Types of data, operations on data","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Lesson repository","category":"page"},{"location":"Syllabus/#Learning-Objectives-3","page":"Syllabus","title":"Learning Objectives","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Distinguish between variables and function arguments\nIdentify functions that operate on or modify data\nCompare and contrast common scalar and container data types\nRecognize errors resulting from using functions on datatypes that do not have appropriate methods","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Execute functions on different types of arguments in a Jupyter notebook and in the REPL\nUse print statements and type introspection methods to investigate a data type\nAssign, modify and copy variables","category":"page"},{"location":"Syllabus/#Lesson-3:-\"Hello,-World!\"-Writing-your-first-program-1","page":"Syllabus","title":"Lesson 3: \"Hello, World!\" Writing your first program","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Lesson repository","category":"page"},{"location":"Syllabus/#Learning-Objectives-4","page":"Syllabus","title":"Learning Objectives","text":"","category":"section"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Syllabus/#","page":"Syllabus","title":"Syllabus","text":"","category":"page"},{"location":"Lesson1/1_terminal/#Part-1-Navigating-the-filesystem-using-the-terminal-1","page":"Using the Terminal","title":"Part 1 - Navigating the filesystem using the terminal","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"You are probably already familiar with your computer's [filesystem]. If you've ever looked at files on your Desktop, or opened Finder/Explorer and navigated to your Documents folder, you've been using the file system. Data is stored on your hard drive as a continuous binary sequence (just 1s and 0s) and without a filesystem, it would be impossible to find anything!","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Finder/Explorer are software programs used to interact with your filesystem. The filesystem contains a mix of files, which are blobs of information (eg. a .docx file containing a MS Word doc) and folders, which can contain files as well as other folders. Just to be confusing, what we colloquially call folders are technically called \"directories.\" I will use the terms interchangeably.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"(Image: File system hierarchy)","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"You may not have thought much about how the filesystem is organized, but you probably have an intuitive sense of how this works. Your [home] directory contains the Desktop and Documents directories, each of which might contain many other subdirectories and/or files, and each subdirectory may have yet more subdirectories and files and so on.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Finder/Explorer are examples of a graphical user interface (GUI - pronounced \"gooey\"), that is a program that allows you to interact with it visually. However, GUIs are difficult to design and maintain, so most bioinformatics tools are built around [commandline] or text-based interfaces. The good news is that the organization of the filesystem is the same whether you're interacting with it in a GUI or in the terminal. And once you learn how to use the command line interface, you'll see that it is a powerful way to get a lot done quickly.","category":"page"},{"location":"Lesson1/1_terminal/#.1:-Open-the-terminal-application-1","page":"Using the Terminal","title":"1.1: Open the terminal application","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Mac Users:  ","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Open Applications\nClick Open the Terminal application","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Windows Users:  ","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Click Start -> Programs\nOpen Windows Subsystem for Linux","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"You will be greeted with a white or black box that contains some text, and a cursor next to the dollar symbol $. This is the command prompt.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"tip: Tip\nUsing the terminal can be quite challenging at first. For one, you cannot interact with text in the same way as you would in a word-processing program like Microsoft Word. In particular, you can't use your mouse to do things like click to move a cursor, or highlight a section of text to be deleted. Instead, you have to use ← and → keys.","category":"page"},{"location":"Lesson1/1_terminal/#.2-Walk-around-your-file-system-1","page":"Using the Terminal","title":"1.2 Walk around your file system","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Think of your filesystem as a branching network of roads that you can walk along. Each directory is a location that has a path back to its parent directory, may or may not contain objects (files), and may have one or many roads leading to new locations (subdirectories).","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Your present location, referred to as the [workingdirectory], is your home folder when you first open the terminal. Let's see where that is.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"In your terminal, type pwd and press enter. This is the \"print working directory\" command.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ pwd","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"/home/kevin","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"If you're using a Mac, this probably displayed something like /Users/yourname.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"tip: Tip\nWhenever you see code blocks in these lessons that start with $, this is a hint that it is a shell command. When copying or typing these commands, do not include the $ (or anything to the left of it). For example, to complete the task above, you should only type pwd, then press enter.$ is referred to as the \"prompt\" or \"command prompt.\" When you enter a command, you may or may not see some output (which will not be preceded by $) and once the command has finished executing, you will see a new prompt.These code blocks will often be followed by a block that does not start with a $. This is the expected output.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Let's take a look around. the ls command is used to list the contents of the directory.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ ls","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"bin      Documents     R       scratch\nDesktop  Downloads     Public  repos","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Your output will likely look a bit different from mine, but you'll probably see Documents and Desktop, as well as other directories you may recognize.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"The ls command can also take a directory as an \"[argument].\" We'll talk more about what that means later - for now, just add Desktop to the command, separated by a space","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ ls Desktop","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"df.csv  dm.csv  dupes.csv  itp.svg","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Again, your output should look different from mine, but (assuming you store anything on your Desktop), you should see a list of files and directories. If your Desktop is pristine, congratulations! You won't see any output.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"note: Windows Users\nA reminder that this Desktop is your linux Desktop. To see your Windows Desktop, use /mnt/c/Users/yourname/Desktop instead.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"The filesystem is organized hierarchically - At the very top of the hierarchy is the [root], which you can think of as a folder that contains all other files and folders. On a Mac (and other Unix systems), the root is referred to with a single forward slash (/), While on Windows machines, the root is probably C:\\.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"note: Windows Users\nWhen you open Windows Subsystem for Linux, you're actually running a fully functional OS with its own file system. As a result, when you type pwd in the terminal, you will see something like /home/yourname, rather than seeing your Windows OS home folder.But WSL has access to your files in a special path, /mnt/c/. If you want to see the files in your Windows Desktop/ directory for example, look in /mnt/c/Users/yourname/Desktop.","category":"page"},{"location":"Lesson1/1_terminal/#Moving-around-1","page":"Using the Terminal","title":"Moving around","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Say you are sitting in your room, and you want to give someone directions to Lulu. One way to do this would be to give directions from where you are:","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Go out the door,\nGo down the hall to the elevator\n... etc","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"In this case, you're providing a [relativepath] - the directions only make sense if the person is starting in your room. If they're at the Science Center and they follow your instructions, they will become hopelessly lost.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Alternatively, you could provide directions from a shared point of reference.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Start at the campus gate on the corner of Weston Rd and Central St\nWalk down the path and turn right just past the Child Study Center towards the Botanical Gardens\n... etc","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"In this case, you're providing an [absolutepath] - no matter where the person is at the time, the directions will make sense.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"An absolute path is great, since the same instructions are useful in most situations, but in many cases, it would be tedious to always have to start instructions from the same location.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"When providing a file path to a unix operating system, you can also provide relative or absolute paths. There are two shared points of reference, your home folder and root, which are specified by ~/ and / respectively when placed at the beginning of the path.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Up above, when we looked at the contents of the Desktop using ls, we provided the relative path from where we were in the home folder. You can tell, because the path did not start with ~/ or /.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"We could have done the same thing using an absolute path:","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ ls ~/Desktop","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"df.csv  dm.csv  dupes.csv  itp.svg","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"The output here should be the same as what you got above. But what if we're in a different location?","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"In order to change the working directory, we use the cd command, giving a path as an argument. For example, to make Desktop the current working directory:","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cd ~/Desktop","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"warning: Checking Question\nIs ~/Desktop a relative or absolute path?","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"It's a good idea (in general, but especially while learning) to repeatedly check that the thing you think happened actually happened.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ pwd","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"/home/kevin/Desktop","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ ls","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"df.csv  dm.csv  dupes.csv  itp.svg","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Notice that with ls, we didn't have to give Desktop as an argument this time. By default, ls lists files in the current working directory.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"warning: Checking Questions\nWhat does pwd stand for?\nWhat does ls stand for?\nWith Desktop as your working directory,  how would you list the contents of your home folder?","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Let's go back to the home folder. Again, we can provide a relative or an absolute path - the absolute path back to home is always ~/, but how do we do the relative path? To walk into subdirectories, we can just provide the name of the subdirectory, but how do we walk \"backwards\", into a parent directory?","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"In unix, parent directories are indicated with ../. So to go back home from /home/kevin/Desktop using a relative path, I would write:","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cd ../\n$ pwd","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"/home/kevin","category":"page"},{"location":"Lesson1/1_terminal/#Practice-1","page":"Using the Terminal","title":"Practice","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Practice moving around your file system using cd, and checking where you are using pwd and ls. If you get lost, just enter cd ~/ to get yourself home.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"tip: Tip\nRather than typing long paths (or even short ones), use the <TAB> key to do auto-completion. For example, with your home folder as your current working directory, type ls De (don't execute), then press <TAB>. This should cause the terminal to fill in ls Desktop automatically.Try typing ls Do, then <TAB>. The first time, nothing happens. Why? Because both Documents and Downloads are valid completions, and the terminal doesn't know which one you want. If you hit <TAB> again, it will display all of the options available. If you add a c, then hit <TAB>, it should complete Documents.As you're navigating around, try to do as little typing as possible. Get into the habit of typing a little bit of a path, then hitting <TAB> (twice if nothing shows up the first time).","category":"page"},{"location":"Lesson1/1_terminal/#.3-Manipulating-files-and-directories-1","page":"Using the Terminal","title":"1.3 Manipulating files and directories","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Of course, looking around is not the only thing you can do from the terminal. Using the terminal allows you to rapidly view, edit, and otherwise manipulate stuff in your file system.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"danger: Danger\nIt is possible to seriously and irreparably damage your computer using commands from the terminal.Be sure to follow instructions carefully, and be sure to keep your backups current.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"First, let's create a directory for use in this course. You can put it in your home directory, or in Documents, or if you have a directory where your course files usually go, that's fine too.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"I'll assume you're making this in ~/Documents/, but if you want it somewhere else, just modify the path accordingly. the command to make a directory is mkdir <path>.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"tip: Tip\nIn many examples like this, I will refer to things wrapped in <>, like <path> or <username>. These are stand-ins for some other value. This is a signal that you should replace that text (including the < and > characters) with the appropriate value.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ mkdir ~/Documents/bisc195\n$ cd ~/Documents/bisc195\n$ pwd","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"/home/kevin/Documents/bisc195","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Now, copy and execute the following command - don't worry about what it does. (if you really want to know, you can read about it here: [whileloop])","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"bisc195 $ for i in {1..10}; do echo \"This is file #${i}\" > \"file${i}.txt\"; ((i++)); done","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"It should finish very quickly. Let's look at what it did","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"bisc195 $ ls","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"file1.txt  file2.txt  file4.txt  file6.txt  file8.txt\nfile10.txt file3.txt  file5.txt  file7.txt  file9.txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"The code you executed created 10 files, each of which contains a bit of text. Look at the contents of file1.txt using the head command.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ head file1.txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"This is file #1","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"The head command prints the first 10 lines of a file by default, but this file only has 1 line, so that's all that's shown.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"note: Note\nFile names usually have 2 parts - the name and the \"extension.\" The extension, like .txt or .docx, usually tells you something about what the file contains, or how it's encoded, but this is not a requirement. The files above could have been named fileX.whatever, and still have the same content. Usually, it's a good idea to have the extension reflect what's in the file, .txt for text, .jl for julia code etc.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"We can look at multiple files at the same time using the concatenate command:","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cat file1.txt file2.txt file3.txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"This is file #1\nThis is file #2\nThis is file #3","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"cat takes any number of files (even just 1!) and prints their entire content to the screen one after another. Be careful - some files are really long, and will go on and on and on and on and...","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"If we want to print the content of all 9 files, we could type them all out, but that would get tedious. There are many useful shortcuts in programming (programmers ~~are lazy~~ like efficiency), one of which is glob patterns.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"The most common glob is *, which stands for any number of characters, including none.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"For example,","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cat *.txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"This is file #1\nThis is file #10\nThis is file #2\nThis is file #3\nThis is file #4\nThis is file #5\nThis is file #6\nThis is file #7\nThis is file #8\nThis is file #9","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Here, *.txt means \"anything that ends with .txt\".","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Another glob is ?, which matches any single character.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cat file?.txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"This is file #1\nThis is file #2\nThis is file #3\nThis is file #4\nThis is file #5\nThis is file #6\nThis is file #7\nThis is file #8\nThis is file #9","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Notice that in this example, file10.txt is not included, since there are 2 characters between file and .txt.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Finally, you can use brackets to specify specific characters, or ranges of characters:","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cat file[2468].txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"This is file #2\nThis is file #4\nThis is file #6\nThis is file #8","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cat file[6-8].txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"This is file #6\nThis is file #7\nThis is file #8","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Let's make a new file that contains the content of all of the others. The > character at the end of a command redirects the output of that command into a new file, so we can do:","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"$ cat file*.txt > all_files.txt\n$ ls","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"all_files.txt file10.txt    file3.txt     file5.txt     file7.txt     file9.txt\nfile1.txt     file2.txt     file4.txt     file6.txt     file8.txt","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"mkdir, rmdir\ncp, mv, rm\nglobs","category":"page"},{"location":"Lesson1/1_terminal/#Key-Terms-1","page":"Using the Terminal","title":"Key Terms","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[filesystem]: a hierarchical organization of files and directories. Additional reading","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[root]: the top of the filesystem hierarchy. A folder that contains all other files and folders.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[home]: a user's primary folder containing Desktop, Documents, and other user-specific folders and files.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[commandline]: a text-based interface for interacting with your computer. Also referred to as \"terminal\" or \"shell.\"","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[workingdirectory]: the current beginning of relative paths. Equivalent to . or ./","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[relativepath]: a path originating at the current working directory","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[absolutepath]: a path originating at the home folder (~/) or root /","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[argument]: a value passed to a function to operate on","category":"page"},{"location":"Lesson1/1_terminal/#More-info-1","page":"Using the Terminal","title":"More info","text":"","category":"section"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"Here's some more information for the curious, but at least for now, it's not necessary to understand it.","category":"page"},{"location":"Lesson1/1_terminal/#","page":"Using the Terminal","title":"Using the Terminal","text":"[whileloop]: The codesh   for counter in {1..9}; do echo \"This is file #${counter}\" > \"file${counter}.txt\"; doneis an example of a \"for loop\",   which we'll learn more about later.   This iterates   In this case, the condition is [ $counter -lt 10 ],   which means \"the value of the counter variable is less than 10.\"Inside the loop are 2 commands.   First, \"This is file #${counter}\" > \"file${counter}.txt\"\" means   \"write the text 'this is file #1' in a file called file1.txt\"   when the value of counter is 1,   \"write the text 'this is file #2' in a file called file2.txt\"   when the value of counter is 2,   etc.   Second, (( counter++ )) means   \"increment the value of the variable counter\".So, in the first cycle of the loop, file1.txt is created,   and 1 is added to the value of counter.   We then go to the top of the loop, and since 2 is less than 10,   we go again - file2.txt is created,   the value of counter is set to 3,   and so on.When file9.txt is created and the value of counter is set to 10,   we again go to the top of the loop,   but now the condition [ $counter -lt 10 ] is no longer true,   and so the loop is complete.","category":"page"},{"location":"#Essential-Skills-for-Computational-Biology-1","page":"Home","title":"Essential Skills for Computational Biology","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"Syllabus.md\", \"Lesson1/index.md\"]\nDepth = 2","category":"page"}]
}
